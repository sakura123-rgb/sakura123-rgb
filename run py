py mule_reencryptor.py old_key.key new_key.key input.yaml output.yaml

python reencrypt_yaml.py \
    --jar /path/to/secure-properties-tool-j17.jar \
    --old-key "your_old_private_key" \
    --new-key "your_new_private_key" \
    --input /path/to/input.yaml \
    --output /path/to/output.yaml


## In-Place Re-encryption Usage

```bash
python reencrypt_in_place.py \
    --jar path/to/secure-properties-tool-j17.jar \
    --old-key "OLD_KEY" \
    --new-key "NEW_KEY" \
    --file your_config.yaml

import subprocess
import os
import argparse
import tempfile

def decrypt_file(jar_path, key, input_file, output_file):
    """Decrypt the input file using the provided key"""
    cmd = [
        'java',
        '-cp', jar_path,
        'com.mulesoft.tools.securePropertiesTool',
        'file',
        'decrypt',
        'AES',
        'CBC',
        key,
        input_file,
        output_file
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print(f"Successfully decrypted {input_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error decrypting file: {e}")
        raise

def encrypt_file(jar_path, key, input_file, output_file):
    """Encrypt the input file using the provided key"""
    cmd = [
        'java',
        '-cp', jar_path,
        'com.mulesoft.tools.securePropertiesTool',
        'file',
        'encrypt',
        'AES',
        'CBC',
        key,
        input_file,
        output_file
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print(f"Successfully encrypted to {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error encrypting file: {e}")
        raise

def replace_file(original_path, new_path):
    """Replace the original file with the new file"""
    try:
        os.replace(new_path, original_path)
        print(f"Successfully replaced {original_path} with new content")
    except OSError as e:
        print(f"Error replacing file: {e}")
        raise

def main():
    parser = argparse.ArgumentParser(description='Re-encrypt YAML file in place with a new key')
    parser.add_argument('--jar', required=True, help='Path to secure-properties-tool-j17.jar')
    parser.add_argument('--old-key', required=True, help='Old private key for decryption')
    parser.add_argument('--new-key', required=True, help='New private key for encryption')
    parser.add_argument('--file', required=True, help='YAML file to update in-place')
    
    args = parser.parse_args()
    
    # Create secure temporary files
    with tempfile.NamedTemporaryFile(delete=False) as temp_decrypted, \
         tempfile.NamedTemporaryFile(delete=False) as temp_encrypted:
        
        temp_decrypted_path = temp_decrypted.name
        temp_encrypted_path = temp_encrypted.name
    
    try:
        # Step 1: Decrypt with old key
        decrypt_file(args.jar, args.old_key, args.file, temp_decrypted_path)
        
        # Step 2: Encrypt with new key
        encrypt_file(args.jar, args.new_key, temp_decrypted_path, temp_encrypted_path)
        
        # Step 3: Replace original file
        replace_file(args.file, temp_encrypted_path)
        
        print("File re-encryption completed successfully!")
    except Exception as e:
        print(f"Process failed: {e}")
        print("Original file remains unchanged.")
    finally:
        # Clean up temporary files if they exist
        for temp_file in [temp_decrypted_path, temp_encrypted_path]:
            if os.path.exists(temp_file):
                os.remove(temp_file)

if __name__ == '__main__':
    main()
