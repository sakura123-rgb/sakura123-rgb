import subprocess
import os
import argparse

def decrypt_file(jar_path, old_key, input_file, temp_file):
    """Decrypt the input file using the old key"""
    cmd = [
        'java',
        '-cp', jar_path,
        'com.mulesoft.tools.securePropertiesTool',
        'file',
        'decrypt',
        'AES',
        'CBC',
        old_key,
        input_file,
        temp_file
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print(f"Successfully decrypted {input_file} to temporary file")
    except subprocess.CalledProcessError as e:
        print(f"Error decrypting file: {e}")
        raise

def encrypt_file(jar_path, new_key, temp_file, output_file):
    """Encrypt the temporary file using the new key"""
    cmd = [
        'java',
        '-cp', jar_path,
        'com.mulesoft.tools.securePropertiesTool',
        'file',
        'encrypt',
        'AES',
        'CBC',
        new_key,
        temp_file,
        output_file
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print(f"Successfully encrypted temporary file to {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error encrypting file: {e}")
        raise

def main():
    parser = argparse.ArgumentParser(description='Decrypt and re-encrypt YAML file with different keys')
    parser.add_argument('--jar', required=True, help='Path to secure-properties-tool-j17.jar')
    parser.add_argument('--old-key', required=True, help='Old private key for decryption')
    parser.add_argument('--new-key', required=True, help='New private key for encryption')
    parser.add_argument('--input', required=True, help='Input YAML file path')
    parser.add_argument('--output', required=True, help='Output YAML file path')
    
    args = parser.parse_args()
    
    # Create a temporary file for the decrypted content
    temp_file = os.path.join(os.path.dirname(args.input), 'temp_decrypted.yaml')
    
    try:
        # Step 1: Decrypt with old key
        decrypt_file(args.jar, args.old_key, args.input, temp_file)
        
        # Step 2: Encrypt with new key
        encrypt_file(args.jar, args.new_key, temp_file, args.output)
        
        print("File re-encryption completed successfully!")
    finally:
        # Clean up temporary file if it exists
        if os.path.exists(temp_file):
            os.remove(temp_file)
            print("Temporary file cleaned up")

if __name__ == '__main__':
    main()
