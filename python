import re
import subprocess
import yaml
from pathlib import Path

class MuleYamlReencryptor:
    ENCRYPTED_PATTERN = re.compile(r'!\[encrypted:(.*?)\]')
    
    def __init__(self, old_private_key_path, new_private_key_path):
        self.old_private_key_path = old_private_key_path
        self.new_private_key_path = new_private_key_path
    
    def reencrypt_file(self, input_path, output_path):
        """Process the YAML file and save re-encrypted version"""
        with open(input_path, 'r') as f:
            yaml_data = yaml.safe_load(f) or {}
        
        self._process_data(yaml_data)
        
        with open(output_path, 'w') as f:
            yaml.dump(yaml_data, f, sort_keys=False)
    
    def _process_data(self, data):
        """Recursively process YAML data structure"""
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, str):
                    data[key] = self._process_string(value)
                else:
                    self._process_data(value)
        elif isinstance(data, list):
            for i, item in enumerate(data):
                if isinstance(item, str):
                    data[i] = self._process_string(item)
                else:
                    self._process_data(item)
    
    def _process_string(self, value):
        """Process string values to find and re-encrypt"""
        match = self.ENCRYPTED_PATTERN.search(value)
        if match:
            encrypted_value = match.group(1)
            decrypted = self._decrypt(encrypted_value, self.old_private_key_path)
            reencrypted = self._encrypt(decrypted, self.new_private_key_path)
            return f'![encrypted:{reencrypted}]'
        return value
    
    def _decrypt(self, encrypted_value, key_path):
        """Decrypt using Mule's secure properties tool"""
        cmd = [
            'java', '-jar', 'secure-properties-tool.jar',
            'decrypt', key_path, encrypted_value
        ]
        return self._run_command(cmd)
    
    def _encrypt(self, plaintext, key_path):
        """Encrypt using Mule's secure properties tool"""
        cmd = [
            'java', '-jar', 'secure-properties-tool.jar',
            'encrypt', key_path, plaintext
        ]
        return self._run_command(cmd)
    
    def _run_command(self, cmd):
        """Execute command and return stripped output"""
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Re-encrypt Mule YAML configuration with new key'
    )
    parser.add_argument('old_key', help='Path to old private key file')
    parser.add_argument('new_key', help='Path to new private key file')
    parser.add_argument('input', help='Path to input YAML file')
    parser.add_argument('output', help='Path to output YAML file')
    
    args = parser.parse_args()
    
    reencryptor = MuleYamlReencryptor(args.old_key, args.new_key)
    reencryptor.reencrypt_file(args.input, args.output)
    
    print(f"Successfully re-encrypted YAML file saved to {args.output}")
